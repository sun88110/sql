CREATE TABLE member_table (
    user_id       VARCHAR2(16)   PRIMARY KEY,  -- PK 및 NOT NULL 설정
    nickname      VARCHAR2(16)   NOT NULL,
    password      VARCHAR2(16)   NOT NULL,     -- VARCHAR 타입으로 변경
    age           NUMBER(3)      NULL,
    gender        VARCHAR2(10)   NULL,
    tel           VARCHAR2(20)   NULL,
    create_time   TIMESTAMP      DEFAULT SYSTIMESTAMP NOT NULL,
    update_time   TIMESTAMP      NULL
);

CREATE TABLE user_table (
    trans_id      NUMBER         PRIMARY KEY,  -- PK
    user_id       VARCHAR2(16)   NOT NULL,
    trans_date    DATE           NOT NULL,
    category      VARCHAR2(20)   NOT NULL,
    description   VARCHAR2(100)  NOT NULL,
    amount        NUMBER         NOT NULL,    -- 금액은 NUMBER 타입 사용
    
    -- member_table과의 외래 키 (FK) 설정
    CONSTRAINT fk_user_member
        FOREIGN KEY (user_id)
        REFERENCES member_table (user_id)
);

CREATE TABLE bucket_table (
    user_id       VARCHAR2(16)   PRIMARY KEY, -- 1:1 관계를 위해 PK 겸 FK
    pay           NUMBER         NOT NULL,    -- 금액은 NUMBER 타입 사용
    update_time   TIMESTAMP      DEFAULT SYSTIMESTAMP NOT NULL,
    
    -- member_table과의 외래 키 (FK) 설정
    CONSTRAINT fk_bucket_member
        FOREIGN KEY (user_id)
        REFERENCES member_table (user_id)
);

-- 1. 시퀀스(Sequence) 생성
CREATE SEQUENCE user_table_seq
START WITH 1
INCREMENT BY 1;

-- 2. 트리거(Trigger) 생성 (데이터 삽입 시 trans_id에 시퀀스 값 자동 할당)
CREATE OR REPLACE TRIGGER trg_user_table_trans_id
BEFORE INSERT ON user_table
FOR EACH ROW
BEGIN
    IF :NEW.trans_id IS NULL THEN
        SELECT user_table_seq.NEXTVAL INTO :NEW.trans_id FROM DUAL;
    END IF;
END;
/
select * from bucket_table;
DROP TABLE member_table purge;

-- 1. 트리거 삭제
DROP TRIGGER trg_user_table_trans_id;

-- 2. 시퀀스 삭제
DROP SEQUENCE user_table_seq;

-------------------------------------------------------------------------------

-- 1. USERS (사용자 정보) 테이블
CREATE TABLE USERS (
    USER_ID       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, -- 사용자 고유 ID (자동 증가)
    USERNAME      VARCHAR2(50) NOT NULL UNIQUE,                                                      -- 로그인 ID
    PASSWORD_HASH VARCHAR2(255) NOT NULL,                                                            -- 비밀번호 (해시값 저장)
    EMAIL         VARCHAR2(100) NOT NULL UNIQUE,                                                     -- 이메일
    BIRTH_YEAR    NUMBER(4) NOT NULL,                                                                -- 나이 분석을 위한 출생 연도 (예: 1990)
    JOIN_DATE     DATE DEFAULT SYSDATE NOT NULL                                                      -- 가입일
);

-- 2. CATEGORIES (거래 카테고리) 테이블
CREATE TABLE CATEGORIES (
    CATEGORY_ID   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, -- 카테고리 고유 ID
    CATEGORY_NAME VARCHAR2(50) NOT NULL UNIQUE,                                                      -- 카테고리 이름 (예: 식비, 교통, 월급)
    CATEGORY_TYPE VARCHAR2(10) NOT NULL,                                                             -- 타입 (예: '수입', '지출')
    CONSTRAINT CHK_CATEGORY_TYPE CHECK (CATEGORY_TYPE IN ('수입', '지출'))                            -- 타입 제한
);

-- 3. TRANSACTIONS (거래 내역) 테이블
CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, -- 거래 고유 ID
    USER_ID           NUMBER NOT NULL,                                                               -- 사용자 ID (FK)
    CATEGORY_ID       NUMBER NOT NULL,                                                               -- 카테고리 ID (FK)
    TRANSACTION_DATE  DATE NOT NULL,                                                                 -- 거래 일시
    AMOUNT            NUMBER(18, 2) NOT NULL,                                                        -- 금액
    DESCRIPTION       VARCHAR2(255),                                                                 -- 상세 설명
    TYPE              VARCHAR2(10) NOT NULL,                                                         -- 거래 타입 (예: '수입', '지출')
    
    CONSTRAINT FK_TRANS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_TRANS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID),
    CONSTRAINT CHK_TRANSACTION_TYPE CHECK (TYPE IN ('수입', '지출'))                                  -- 타입 제한
);

-- 4. BUDGETS (예산 정보) 테이블
CREATE TABLE BUDGETS (
    BUDGET_ID       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, -- 예산 고유 ID
    USER_ID         NUMBER NOT NULL,                                                               -- 사용자 ID (FK)
    CATEGORY_ID     NUMBER,                                                                        -- 카테고리 ID (FK, NULL이면 전체 예산)
    BUDGET_MONTH    CHAR(6) NOT NULL,                                                              -- 예산 설정 월 (YYYYMM 형식, 예: '202510')
    BUDGET_AMOUNT   NUMBER(18, 2) NOT NULL,                                                        -- 예산 금액
    
    CONSTRAINT FK_BUDGET_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_BUDGET_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID)
);

-- 5. AGE_CATEGORY_SUMMARY (나이별 카테고리 요약) 테이블
CREATE TABLE AGE_CATEGORY_SUMMARY (
    SUMMARY_ID      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, -- 요약 고유 ID
    AGE_GROUP       VARCHAR2(10) NOT NULL,                                                             -- 나이대 (예: '20대', '30대')
    CATEGORY_ID     NUMBER NOT NULL,                                                               -- 카테고리 ID (FK)
    TOTAL_SPENT     NUMBER(18, 2) NOT NULL,                                                        -- 해당 나이대/카테고리 총 지출액
    RANKING_ORDER   NUMBER(2) NOT NULL,                                                            -- 나이대별 지출 순위 (1~5)
    REPORT_MONTH    CHAR(6) NOT NULL,                                                              -- 집계 기준 월 (YYYYMM)
    
    CONSTRAINT FK_SUMMARY_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID),
    CONSTRAINT UK_AGE_CAT_RANK UNIQUE (AGE_GROUP, REPORT_MONTH, RANKING_ORDER)                       -- 나이대/월별 순위는 중복 불가
);

-- 6. SETTINGS (설정 정보) 테이블
CREATE TABLE SETTINGS (
    SETTING_ID    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, -- 설정 고유 ID
    USER_ID       NUMBER,                                                                        -- 사용자 ID (FK, NULL이면 전역 설정)
    SETTING_KEY   VARCHAR2(50) NOT NULL,                                                           -- 설정 키 (예: 'CURRENCY', 'THEME')
    SETTING_VALUE VARCHAR2(255),                                                                   -- 설정 값
    
    CONSTRAINT FK_SETTING_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT UK_USER_KEY UNIQUE (USER_ID, SETTING_KEY)                                             -- 사용자별 설정 키는 중복 불가
);



-----------------------------------test

INSERT INTO USERS (USER_ID, USERNAME, PASSWORD_HASH, EMAIL, BIRTH_YEAR) VALUES
(NULL, 'user20', 'hash20', 'user20@example.com', 2000); -- 현재 20대 (2025년 기준)

INSERT INTO USERS (USER_ID, USERNAME, PASSWORD_HASH, EMAIL, BIRTH_YEAR) VALUES
(NULL, 'user30', 'hash30', 'user30@example.com', 1990); -- 현재 30대

INSERT INTO USERS (USER_ID, USERNAME, PASSWORD_HASH, EMAIL, BIRTH_YEAR) VALUES
(NULL, 'user40', 'hash40', 'user40@example.com', 1980); -- 현재 40대

COMMIT;


-- 지출 카테고리
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '식비', '지출');
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '교통/차량', '지출');
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '생활용품', '지출');
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '문화생활', '지출');
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '저축/투자', '지출');

-- 수입 카테고리
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '월급', '수입');
INSERT INTO CATEGORIES (CATEGORY_ID, CATEGORY_NAME, CATEGORY_TYPE) VALUES (NULL, '용돈', '수입');

COMMIT;

select * from BUDGETS;
-- 20대 사용자 (USER_ID: 1) 데이터: 식비(1), 문화생활(4) 집중
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 1, 1, TO_DATE('2025-09-01', 'YYYY-MM-DD'), 45000, '친구들과 저녁 식사', '지출'); -- 식비
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 1, 1, TO_DATE('2025-09-05', 'YYYY-MM-DD'), 12000, '점심 도시락 재료', '지출'); -- 식비
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 1, 4, TO_DATE('2025-09-10', 'YYYY-MM-DD'), 25000, '영화 관람', '지출'); -- 문화생활
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 1, 4, TO_DATE('2025-09-15', 'YYYY-MM-DD'), 60000, '콘서트 티켓', '지출'); -- 문화생활
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 1, 2, TO_DATE('2025-09-20', 'YYYY-MM-DD'), 3000, '버스 요금', '지출'); -- 교통

-- 30대 사용자 (USER_ID: 2) 데이터: 교통/차량(2), 생활용품(3) 집중
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 2, 2, TO_DATE('2025-09-02', 'YYYY-MM-DD'), 80000, '차량 주유', '지출'); -- 교통/차량
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 2, 2, TO_DATE('2025-09-06', 'YYYY-MM-DD'), 150000, '차량 정비', '지출'); -- 교통/차량
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 2, 3, TO_DATE('2025-09-11', 'YYYY-MM-DD'), 55000, '대형마트 생필품 구매', '지출'); -- 생활용품
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 2, 3, TO_DATE('2025-09-16', 'YYYY-MM-DD'), 30000, '온라인 세제 구매', '지출'); -- 생활용품
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 2, 1, TO_DATE('2025-09-21', 'YYYY-MM-DD'), 20000, '배달 음식', '지출'); -- 식비

-- 40대 사용자 (USER_ID: 3) 데이터: 저축/투자(5), 월급(6)
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 3, 6, TO_DATE('2025-09-01', 'YYYY-MM-DD'), 5000000, '9월 급여', '수입'); -- 월급
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 3, 5, TO_DATE('2025-09-03', 'YYYY-MM-DD'), 1500000, '정기적금 불입', '지출'); -- 저축/투자
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 3, 5, TO_DATE('2025-09-07', 'YYYY-MM-DD'), 1000000, '주식 투자금', '지출'); -- 저축/투자
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, CATEGORY_ID, TRANSACTION_DATE, AMOUNT, DESCRIPTION, TYPE) VALUES
(NULL, 3, 1, TO_DATE('2025-09-12', 'YYYY-MM-DD'), 80000, '가족 외식', '지출'); -- 식비

COMMIT;

-- 30대 사용자 (USER_ID: 2)의 9월 예산 설정
INSERT INTO BUDGETS (BUDGET_ID, USER_ID, CATEGORY_ID, BUDGET_MONTH, BUDGET_AMOUNT) VALUES
(NULL, 2, NULL, '202509', 2000000); -- 9월 전체 예산: 200만원

INSERT INTO BUDGETS (BUDGET_ID, USER_ID, CATEGORY_ID, BUDGET_MONTH, BUDGET_AMOUNT) VALUES 
(NULL, 2, 1, '202509', 300000); -- 9월 식비 예산: 30만원 (CATEGORY_ID: 1)

COMMIT;

select * from users;

-- 시퀀스가 이미 존재한다면 아래 구문을 먼저 실행하여 삭제합니다. (선택 사항)
-- DROP SEQUENCE TRANSACTIONS_SEQ;

-- TRANSACTIONS_SEQ 시퀀스를 생성합니다.
CREATE SEQUENCE TRANSACTIONS_SEQ
START WITH 1         -- 시작 값: 1부터 시작
INCREMENT BY 1       -- 증가 값: 1씩 증가
NOMAXVALUE           -- 최대값 없음
NOCYCLE              -- 반복하지 않음
CACHE 20;            -- 성능 향상을 위해 20개의 값을 미리 캐시

SELECT USER_ID, USERNAME FROM USERS WHERE USERNAME = 'user01';